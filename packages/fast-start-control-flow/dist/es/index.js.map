{"version":3,"file":"index.js","sources":["../../src/If.vue","../../src/For.vue","../../src/Switch.vue","../../src/Match.vue"],"sourcesContent":["<script setup lang=\"ts\" generic=\"T\">\ndefineOptions({\n    name: \"If\"\n})\ndefineProps<{\n    when: T | undefined | null | false\n}>()\n\nconst valueType = (item: any) => {\n    return item as NonNullable<T>\n}\n</script>\n\n<template>\n    <slot v-if=\"when\" :value=\"valueType(when)\" />\n    <slot v-else name=\"fallback\" />\n</template>\n","<script setup lang=\"ts\" generic=\"T extends any[]\">\nimport { computed } from \"vue\"\nimport If from \"./If.vue\"\n\ndefineOptions({\n    name: \"For\"\n})\n\nconst props = defineProps<{\n    echo: T\n    rowKey: keyof T[number]\n}>()\n\nfunction itemType(item: T[number]) {\n    return item as T[number]\n}\n\nconst echoType = computed<any[]>(() => {\n    return props.echo\n})\n</script>\n\n<template>\n    <template v-for=\"item in echo\" :key=\"rowKey\">\n        <slot v-bind=\"itemType(item)\" />\n    </template>\n    <If :when=\"!echoType || !echoType.length || echoType.length === 0\">\n        <slot name=\"fallback\" />\n    </If>\n</template>\n","<script setup lang=\"ts\">\nimport { RendererElement, RendererNode, VNode, computed, useSlots } from \"vue\"\n\nimport If from \"./If.vue\"\nimport { MatchProps } from \"./type\"\n\ndefineOptions({\n    name: \"Switch\"\n})\nconst slots = useSlots()\nfunction getChildren() {\n    return slots.default ? slots.default() : null\n}\n\nfunction recursiveGetChildren(\n    children: VNode<\n        RendererNode,\n        RendererElement,\n        {\n            [key: string]: any\n        }\n    >[],\n    results: {\n        when?: MatchProps<any>[\"when\"]\n        slot?: VNode<any>\n    }[]\n) {\n    if (!results) {\n        results = []\n    }\n\n    if (!Array.isArray(children)) {\n        children = [children]\n    }\n\n    for (let i = 0; i < children.length; i++) {\n        const c = children[i].props!.when\n        if (c) {\n            return [i, c, children[i]]\n        }\n    }\n    return [-1]\n}\n\nconst columns = computed(() => {\n    let children = getChildren()\n\n    if (!children) {\n        return\n    }\n    const [index, when, cond] = recursiveGetChildren(children, [])\n\n    return {\n        index,\n        when,\n        slot: cond\n    }\n})\n</script>\n\n<template>\n    <If :when=\"columns?.index !== -1\">\n        <component :is=\"columns?.slot\" />\n        <template #fallback>\n            <slot name=\"fallback\" />\n        </template>\n    </If>\n</template>\n","<script setup lang=\"ts\" generic=\"T\">\ndefineOptions({\n    name: \"Match\"\n})\ndefineProps<{\n    when: T | undefined | null | false\n}>()\n\nconst valueType = (item: any) => {\n    return item as NonNullable<T>\n}\n</script>\n<template>\n    <slot :value=\"valueType(when)\" />\n</template>\n"],"names":["valueType","item","props","__props","itemType","echoType","computed","slots","useSlots","getChildren","recursiveGetChildren","children","results","i","c","columns","index","when","cond"],"mappings":";;;;;;;;AAQM,UAAAA,IAAY,CAACC,MACRA;;;;;;;;;;;;;;ACDX,UAAMC,IAAQC;AAKd,aAASC,EAASH,GAAiB;AACxB,aAAAA;AAAA,IACX;AAEM,UAAAI,IAAWC,EAAgB,MACtBJ,EAAM,IAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVD,UAAMK,IAAQC;AACd,aAASC,IAAc;AACnB,aAAOF,EAAM,UAAUA,EAAM,QAAA,IAAY;AAAA,IAC7C;AAES,aAAAG,EACLC,GAOAC,GAIF;AAKE,MAAK,MAAM,QAAQD,CAAQ,MACvBA,IAAW,CAACA,CAAQ;AAGxB,eAASE,IAAI,GAAGA,IAAIF,EAAS,QAAQE,KAAK;AACtC,cAAMC,IAAIH,EAASE,CAAC,EAAE,MAAO;AAC7B,YAAIC;AACA,iBAAO,CAACD,GAAGC,GAAGH,EAASE,CAAC,CAAC;AAAA,MAEjC;AACA,aAAO,CAAC,EAAE;AAAA,IACd;AAEM,UAAAE,IAAUT,EAAS,MAAM;AAC3B,UAAIK,IAAWF;AAEf,UAAI,CAACE;AACD;AAEE,YAAA,CAACK,GAAOC,GAAMC,CAAI,IAAIR,EAAqBC,CAAY;AAEtD,aAAA;AAAA,QACH,OAAAK;AAAA,QACA,MAAAC;AAAA,QACA,MAAMC;AAAA,MAAA;AAAA,IACV,CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDK,UAAAlB,IAAY,CAACC,MACRA;;;;;;"}